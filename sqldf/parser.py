#!/usr/bin/env python3.8
# @generated by pegen from sqldf/sql.gram

import ast
import sys
import tokenize

from typing import Any, Optional

from pegen.parser import memoize, memoize_left_rec, logger, Parser
# Keywords and soft keywords are listed at the end of the parser definition.
class GeneratedParser(Parser):

    @memoize
    def start(self) -> Optional[Any]:
        # start: select
        mark = self._mark()
        if (
            (select := self.select())
        ):
            return select
        self._reset(mark)
        return None

    @memoize
    def select(self) -> Optional[Any]:
        # select: 'SELECT' selectables
        mark = self._mark()
        if (
            (literal := self.expect('SELECT'))
            and
            (selectables := self.selectables())
        ):
            return selectables
        self._reset(mark)
        return None

    @memoize
    def selectables(self) -> Optional[Any]:
        # selectables: ','.selectable+
        mark = self._mark()
        if (
            (_gather_1 := self._gather_1())
        ):
            return _gather_1
        self._reset(mark)
        return None

    @memoize
    def selectable(self) -> Optional[Any]:
        # selectable: NAME | NUMBER
        mark = self._mark()
        if (
            (name := self.name())
        ):
            return {'column' : name . string}
        self._reset(mark)
        if (
            (number := self.number())
        ):
            return {'const' : float ( number . string )}
        self._reset(mark)
        return None

    @memoize
    def _loop0_2(self) -> Optional[Any]:
        # _loop0_2: ',' selectable
        mark = self._mark()
        children = []
        while (
            (literal := self.expect(','))
            and
            (elem := self.selectable())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children

    @memoize
    def _gather_1(self) -> Optional[Any]:
        # _gather_1: selectable _loop0_2
        mark = self._mark()
        if (
            (elem := self.selectable())
            is not None
            and
            (seq := self._loop0_2())
            is not None
        ):
            return [elem] + seq
        self._reset(mark)
        return None

    KEYWORDS = ('SELECT',)
    SOFT_KEYWORDS = ()


if __name__ == '__main__':
    from pegen.parser import simple_parser_main
    simple_parser_main(GeneratedParser)
